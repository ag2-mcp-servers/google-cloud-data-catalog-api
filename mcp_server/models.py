# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:40:40+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GetPolicyOptions(BaseModel):
    requestedPolicyVersion: Optional[int] = Field(
        None,
        description='Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class ConnectionType(Enum):
    CONNECTION_TYPE_UNSPECIFIED = 'CONNECTION_TYPE_UNSPECIFIED'
    CLOUD_SQL = 'CLOUD_SQL'


class GoogleCloudDatacatalogV1BigQueryDateShardedSpec(BaseModel):
    dataset: Optional[str] = Field(
        None,
        description='Output only. The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.',
    )
    latestShardResource: Optional[str] = Field(
        None, description='Output only. BigQuery resource name of the latest shard.'
    )
    shardCount: Optional[str] = Field(
        None, description='Output only. Total number of shards.'
    )
    tablePrefix: Optional[str] = Field(
        None,
        description='Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.',
    )


class GoogleCloudDatacatalogV1BigQueryRoutineSpec(BaseModel):
    importedLibraries: Optional[List[str]] = Field(
        None, description='Paths of the imported libraries.'
    )


class TableSourceType(Enum):
    TABLE_SOURCE_TYPE_UNSPECIFIED = 'TABLE_SOURCE_TYPE_UNSPECIFIED'
    BIGQUERY_VIEW = 'BIGQUERY_VIEW'
    BIGQUERY_TABLE = 'BIGQUERY_TABLE'
    BIGQUERY_MATERIALIZED_VIEW = 'BIGQUERY_MATERIALIZED_VIEW'


class GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpec(
    BaseModel
):
    displayName: Optional[str] = Field(None, description='Name of the cluster.')
    linkedResource: Optional[str] = Field(
        None, description='A link back to the parent resource, in this case Instance.'
    )
    location: Optional[str] = Field(
        None, description='Location of the cluster, typically a Cloud zone.'
    )
    type: Optional[str] = Field(
        None, description='Type of the resource. For a cluster this would be "CLUSTER".'
    )


class GoogleCloudDatacatalogV1CloudBigtableSystemSpec(BaseModel):
    instanceDisplayName: Optional[str] = Field(
        None,
        description='Display name of the Instance. This is user specified and different from the resource name.',
    )


class Type(Enum):
    DATABASE_TYPE_UNSPECIFIED = 'DATABASE_TYPE_UNSPECIFIED'
    POSTGRES = 'POSTGRES'
    MYSQL = 'MYSQL'


class GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec(BaseModel):
    database: Optional[str] = Field(None, description='Database name.')
    instanceId: Optional[str] = Field(
        None,
        description='Cloud SQL instance ID in the format of `project:location:instance`.',
    )
    type: Optional[Type] = Field(None, description='Type of the Cloud SQL database.')


class HighestIndexingType(Enum):
    INDEXING_TYPE_UNSPECIFIED = 'INDEXING_TYPE_UNSPECIFIED'
    INDEXING_TYPE_NONE = 'INDEXING_TYPE_NONE'
    INDEXING_TYPE_NON_UNIQUE = 'INDEXING_TYPE_NON_UNIQUE'
    INDEXING_TYPE_UNIQUE = 'INDEXING_TYPE_UNIQUE'
    INDEXING_TYPE_PRIMARY_KEY = 'INDEXING_TYPE_PRIMARY_KEY'


class Type1(Enum):
    LOOKER_COLUMN_TYPE_UNSPECIFIED = 'LOOKER_COLUMN_TYPE_UNSPECIFIED'
    DIMENSION = 'DIMENSION'
    DIMENSION_GROUP = 'DIMENSION_GROUP'
    FILTER = 'FILTER'
    MEASURE = 'MEASURE'
    PARAMETER = 'PARAMETER'


class GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec(BaseModel):
    type: Optional[Type1] = Field(
        None, description='Looker specific column type of this column.'
    )


class GoogleCloudDatacatalogV1CommonUsageStats(BaseModel):
    viewCount: Optional[str] = Field(None, description='View count in source system.')


class GoogleCloudDatacatalogV1ContactsPerson(BaseModel):
    designation: Optional[str] = Field(
        None, description='Designation of the person, for example, Data Steward.'
    )
    email: Optional[str] = Field(
        None,
        description='Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.',
    )


class Service(Enum):
    SERVICE_UNSPECIFIED = 'SERVICE_UNSPECIFIED'
    CLOUD_STORAGE = 'CLOUD_STORAGE'
    BIGQUERY = 'BIGQUERY'


class Type2(Enum):
    TABLE_TYPE_UNSPECIFIED = 'TABLE_TYPE_UNSPECIFIED'
    NATIVE = 'NATIVE'
    EXTERNAL = 'EXTERNAL'


class ViewType(Enum):
    VIEW_TYPE_UNSPECIFIED = 'VIEW_TYPE_UNSPECIFIED'
    STANDARD_VIEW = 'STANDARD_VIEW'
    MATERIALIZED_VIEW = 'MATERIALIZED_VIEW'


class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec(BaseModel):
    baseTable: Optional[str] = Field(
        None, description='Name of a singular table this view reflects one to one.'
    )
    sqlQuery: Optional[str] = Field(
        None, description='SQL query used to generate this view.'
    )
    viewType: Optional[ViewType] = Field(None, description='Type of this view.')


class System(Enum):
    INTEGRATED_SYSTEM_UNSPECIFIED = 'INTEGRATED_SYSTEM_UNSPECIFIED'
    BIGQUERY = 'BIGQUERY'
    CLOUD_PUBSUB = 'CLOUD_PUBSUB'
    DATAPROC_METASTORE = 'DATAPROC_METASTORE'
    DATAPLEX = 'DATAPLEX'
    CLOUD_SPANNER = 'CLOUD_SPANNER'
    CLOUD_BIGTABLE = 'CLOUD_BIGTABLE'
    CLOUD_SQL = 'CLOUD_SQL'
    LOOKER = 'LOOKER'


class GoogleCloudDatacatalogV1DataplexExternalTable(BaseModel):
    dataCatalogEntry: Optional[str] = Field(
        None,
        description='Name of the Data Catalog entry representing the external table.',
    )
    fullyQualifiedName: Optional[str] = Field(
        None, description='Fully qualified name (FQN) of the external table.'
    )
    googleCloudResource: Optional[str] = Field(
        None, description='Google Cloud resource name of the external table.'
    )
    system: Optional[System] = Field(
        None, description='Service in which the external table is registered.'
    )


class IntegratedSystem(Enum):
    INTEGRATED_SYSTEM_UNSPECIFIED = 'INTEGRATED_SYSTEM_UNSPECIFIED'
    BIGQUERY = 'BIGQUERY'
    CLOUD_PUBSUB = 'CLOUD_PUBSUB'
    DATAPROC_METASTORE = 'DATAPROC_METASTORE'
    DATAPLEX = 'DATAPLEX'
    CLOUD_SPANNER = 'CLOUD_SPANNER'
    CLOUD_BIGTABLE = 'CLOUD_BIGTABLE'
    CLOUD_SQL = 'CLOUD_SQL'
    LOOKER = 'LOOKER'


class Type3(Enum):
    ENTRY_TYPE_UNSPECIFIED = 'ENTRY_TYPE_UNSPECIFIED'
    TABLE = 'TABLE'
    MODEL = 'MODEL'
    DATA_STREAM = 'DATA_STREAM'
    FILESET = 'FILESET'
    CLUSTER = 'CLUSTER'
    DATABASE = 'DATABASE'
    DATA_SOURCE_CONNECTION = 'DATA_SOURCE_CONNECTION'
    ROUTINE = 'ROUTINE'
    LAKE = 'LAKE'
    ZONE = 'ZONE'
    SERVICE = 'SERVICE'
    DATABASE_SCHEMA = 'DATABASE_SCHEMA'
    DASHBOARD = 'DASHBOARD'
    EXPLORE = 'EXPLORE'
    LOOK = 'LOOK'


class GoogleCloudDatacatalogV1EntryOverview(BaseModel):
    overview: Optional[str] = Field(
        None,
        description='Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.',
    )


class State(Enum):
    IMPORT_STATE_UNSPECIFIED = 'IMPORT_STATE_UNSPECIFIED'
    IMPORT_QUEUED = 'IMPORT_QUEUED'
    IMPORT_IN_PROGRESS = 'IMPORT_IN_PROGRESS'
    IMPORT_DONE = 'IMPORT_DONE'
    IMPORT_OBSOLETE = 'IMPORT_OBSOLETE'


class GoogleCloudDatacatalogV1ImportEntriesResponse(BaseModel):
    deletedEntriesCount: Optional[str] = Field(
        None, description='Number of entries deleted as a result of import operation.'
    )
    upsertedEntriesCount: Optional[str] = Field(
        None,
        description='Cumulative number of entries created and entries updated as a result of import operation.',
    )


class GoogleCloudDatacatalogV1LookerSystemSpec(BaseModel):
    parentInstanceDisplayName: Optional[str] = Field(
        None,
        description='Name of the parent Looker Instance. Empty if it does not exist.',
    )
    parentInstanceId: Optional[str] = Field(
        None,
        description='ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`',
    )
    parentModelDisplayName: Optional[str] = Field(
        None, description='Name of the parent Model. Empty if it does not exist.'
    )
    parentModelId: Optional[str] = Field(
        None, description='ID of the parent Model. Empty if it does not exist.'
    )
    parentViewDisplayName: Optional[str] = Field(
        None, description='Name of the parent View. Empty if it does not exist.'
    )
    parentViewId: Optional[str] = Field(
        None, description='ID of the parent View. Empty if it does not exist.'
    )


class GoogleCloudDatacatalogV1PersonalDetails(BaseModel):
    starTime: Optional[str] = Field(
        None, description='Set if the entry is starred; unset otherwise.'
    )
    starred: Optional[bool] = Field(
        None, description='True if the entry is starred by the user; false otherwise.'
    )


class GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema(BaseModel):
    text: Optional[str] = Field(None, description='JSON source of the Avro schema.')


class GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema(BaseModel):
    pass


class GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema(BaseModel):
    pass


class GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema(BaseModel):
    pass


class GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema(BaseModel):
    text: Optional[str] = Field(
        None, description='Protocol buffer source of the schema.'
    )


class GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema(BaseModel):
    text: Optional[str] = Field(None, description='Thrift IDL source of the schema.')


class State1(Enum):
    RECONCILIATION_STATE_UNSPECIFIED = 'RECONCILIATION_STATE_UNSPECIFIED'
    RECONCILIATION_QUEUED = 'RECONCILIATION_QUEUED'
    RECONCILIATION_IN_PROGRESS = 'RECONCILIATION_IN_PROGRESS'
    RECONCILIATION_DONE = 'RECONCILIATION_DONE'


class GoogleCloudDatacatalogV1ReconcileTagsResponse(BaseModel):
    createdTagsCount: Optional[str] = Field(
        None, description='Number of tags created in the request.'
    )
    deletedTagsCount: Optional[str] = Field(
        None, description='Number of tags deleted in the request.'
    )
    updatedTagsCount: Optional[str] = Field(
        None, description='Number of tags updated in the request.'
    )


class RoutineType(Enum):
    ROUTINE_TYPE_UNSPECIFIED = 'ROUTINE_TYPE_UNSPECIFIED'
    SCALAR_FUNCTION = 'SCALAR_FUNCTION'
    PROCEDURE = 'PROCEDURE'


class Mode(Enum):
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    IN = 'IN'
    OUT = 'OUT'
    INOUT = 'INOUT'


class GoogleCloudDatacatalogV1RoutineSpecArgument(BaseModel):
    mode: Optional[Mode] = Field(
        None, description='Specifies whether the argument is input or output.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the argument. A return argument of a function might not have a name.',
    )
    type: Optional[str] = Field(
        None,
        description='Type of the argument. The exact value depends on the source system and the language.',
    )


class GoogleCloudDatacatalogV1SqlDatabaseSystemSpec(BaseModel):
    databaseVersion: Optional[str] = Field(
        None, description='Version of the database engine.'
    )
    instanceHost: Optional[str] = Field(
        None,
        description='Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.',
    )
    sqlEngine: Optional[str] = Field(
        None,
        description='SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.',
    )


class GoogleCloudDatacatalogV1StorageProperties(BaseModel):
    filePattern: Optional[List[str]] = Field(
        None,
        description='Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`',
    )
    fileType: Optional[str] = Field(
        None, description='File type in MIME format, for example, `text/plain`.'
    )


class GoogleCloudDatacatalogV1SystemTimestamps(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Creation timestamp of the resource within the given system.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.',
    )


class GoogleCloudDatacatalogV1TableSpec(BaseModel):
    groupedEntry: Optional[str] = Field(
        None,
        description='Output only. If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.',
    )


class GoogleCloudDatacatalogV1TagFieldEnumValue(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the enum value.'
    )


class GoogleCloudDatacatalogV1UsageStats(BaseModel):
    totalCancellations: Optional[float] = Field(
        None,
        description='The number of cancelled attempts to use the underlying entry.',
    )
    totalCompletions: Optional[float] = Field(
        None, description='The number of successful uses of the underlying entry.'
    )
    totalExecutionTimeForCompletionsMillis: Optional[float] = Field(
        None, description='Total time spent only on successful uses, in milliseconds.'
    )
    totalFailures: Optional[float] = Field(
        None, description='The number of failed attempts to use the underlying entry.'
    )


class GoogleCloudDatacatalogV1ViewSpec(BaseModel):
    viewQuery: Optional[str] = Field(
        None, description='Output only. The query that defines the table view.'
    )


class GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec(BaseModel):
    dataset: Optional[str] = Field(
        None,
        description='Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.',
    )
    shardCount: Optional[str] = Field(
        None, description='Output only. Total number of shards.'
    )
    tablePrefix: Optional[str] = Field(
        None,
        description='Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.',
    )


class GoogleCloudDatacatalogV1beta1ColumnSchema(BaseModel):
    column: Optional[str] = Field(None, description='Required. Name of the column.')
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the column. Default value is an empty string.',
    )
    mode: Optional[str] = Field(
        None,
        description="Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.",
    )
    subcolumns: Optional[List[GoogleCloudDatacatalogV1beta1ColumnSchema]] = Field(
        None,
        description='Optional. Schema of sub-columns. A column can have zero or more sub-columns.',
    )
    type: Optional[str] = Field(None, description='Required. Type of the column.')


class IntegratedSystem1(Enum):
    INTEGRATED_SYSTEM_UNSPECIFIED = 'INTEGRATED_SYSTEM_UNSPECIFIED'
    BIGQUERY = 'BIGQUERY'
    CLOUD_PUBSUB = 'CLOUD_PUBSUB'


class Type4(Enum):
    ENTRY_TYPE_UNSPECIFIED = 'ENTRY_TYPE_UNSPECIFIED'
    TABLE = 'TABLE'
    MODEL = 'MODEL'
    DATA_STREAM = 'DATA_STREAM'
    FILESET = 'FILESET'


class PrimitiveType(Enum):
    PRIMITIVE_TYPE_UNSPECIFIED = 'PRIMITIVE_TYPE_UNSPECIFIED'
    DOUBLE = 'DOUBLE'
    STRING = 'STRING'
    BOOL = 'BOOL'
    TIMESTAMP = 'TIMESTAMP'


class GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Required. The display name of the enum value. Must not be an empty string.',
    )


class GoogleCloudDatacatalogV1beta1PolicyTag(BaseModel):
    childPolicyTags: Optional[List[str]] = Field(
        None,
        description='Output only. Resource names of child policy tags of this policy tag.',
    )
    description: Optional[str] = Field(
        None,
        description='Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of this policy tag, whose format is: "projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}".',
    )
    parentPolicyTag: Optional[str] = Field(
        None,
        description='Resource name of this policy tag\'s parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.',
    )


class GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest(BaseModel):
    newEnumValueDisplayName: Optional[str] = Field(
        None,
        description='Required. The new display name of the enum value. For example, `my_new_enum_value`.',
    )


class GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldRequest(BaseModel):
    newTagTemplateFieldId: Optional[str] = Field(
        None,
        description='Required. The new ID of this tag template field. For example, `my_new_field`.',
    )


class GoogleCloudDatacatalogV1beta1Schema(BaseModel):
    columns: Optional[List[GoogleCloudDatacatalogV1beta1ColumnSchema]] = Field(
        None,
        description='Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.',
    )


class GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope(BaseModel):
    includeGcpPublicDatasets: Optional[bool] = Field(
        None,
        description='If `true`, include Google Cloud public datasets in the search results. Info on Google Cloud public datasets is available at https://cloud.google.com/public-datasets/. By default, Google Cloud public datasets are excluded.',
    )
    includeOrgIds: Optional[List[str]] = Field(
        None,
        description='The list of organization IDs to search within. To find your organization ID, follow instructions in https://cloud.google.com/resource-manager/docs/creating-managing-organization.',
    )
    includeProjectIds: Optional[List[str]] = Field(
        None,
        description='The list of project IDs to search within. To learn more about the distinction between project names/IDs/numbers, go to https://cloud.google.com/docs/overview/#projects.',
    )
    restrictedLocations: Optional[List[str]] = Field(
        None,
        description='Optional. The list of locations to search within. 1. If empty, search will be performed in all locations; 2. If any of the locations are NOT in the valid locations list, error will be returned; 3. Otherwise, search only the given locations for matching results. Typical usage is to leave this field empty. When a location is unreachable as returned in the `SearchCatalogResponse.unreachable` field, users can repeat the search request with this parameter set to get additional information on the error. Valid locations: * asia-east1 * asia-east2 * asia-northeast1 * asia-northeast2 * asia-northeast3 * asia-south1 * asia-southeast1 * australia-southeast1 * eu * europe-north1 * europe-west1 * europe-west2 * europe-west3 * europe-west4 * europe-west6 * global * northamerica-northeast1 * southamerica-east1 * us * us-central1 * us-east1 * us-east4 * us-west1 * us-west2',
    )


class SearchResultType(Enum):
    SEARCH_RESULT_TYPE_UNSPECIFIED = 'SEARCH_RESULT_TYPE_UNSPECIFIED'
    ENTRY = 'ENTRY'
    TAG_TEMPLATE = 'TAG_TEMPLATE'
    ENTRY_GROUP = 'ENTRY_GROUP'


class GoogleCloudDatacatalogV1beta1SearchCatalogResult(BaseModel):
    linkedResource: Optional[str] = Field(
        None,
        description='The full name of the cloud resource the entry belongs to. See: https://cloud.google.com/apis/design/resource_names#full_resource_name. Example: * `//bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId`',
    )
    modifyTime: Optional[str] = Field(
        None,
        description='Last-modified timestamp of the entry from the managing system.',
    )
    relativeResourceName: Optional[str] = Field(
        None,
        description='The relative resource name of the resource in URL format. Examples: * `projects/{project_id}/locations/{location_id}/entryGroups/{entry_group_id}/entries/{entry_id}` * `projects/{project_id}/tagTemplates/{tag_template_id}`',
    )
    searchResultSubtype: Optional[str] = Field(
        None,
        description='Sub-type of the search result. This is a dot-delimited description of the resource\'s full type, and is the same as the value callers would provide in the "type" search facet. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.',
    )
    searchResultType: Optional[SearchResultType] = Field(
        None,
        description='Type of the search result. This field can be used to determine which Get method to call to fetch the full resource.',
    )


class GoogleCloudDatacatalogV1beta1SerializedPolicyTag(BaseModel):
    childPolicyTags: Optional[
        List[GoogleCloudDatacatalogV1beta1SerializedPolicyTag]
    ] = Field(None, description='Children of the policy tag if any.')
    description: Optional[str] = Field(
        None,
        description='Description of the serialized policy tag. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. Display name of the policy tag. Max 200 bytes when encoded in UTF-8.',
    )
    policyTag: Optional[str] = Field(
        None,
        description='Resource name of the policy tag. This field will be ignored when calling ImportTaxonomies.',
    )


class ActivatedPolicyType(Enum):
    POLICY_TYPE_UNSPECIFIED = 'POLICY_TYPE_UNSPECIFIED'
    FINE_GRAINED_ACCESS_CONTROL = 'FINE_GRAINED_ACCESS_CONTROL'


class GoogleCloudDatacatalogV1beta1SerializedTaxonomy(BaseModel):
    activatedPolicyTypes: Optional[List[ActivatedPolicyType]] = Field(
        None, description='A list of policy types that are activated for a taxonomy.'
    )
    description: Optional[str] = Field(
        None,
        description='Description of the serialized taxonomy. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8.',
    )
    policyTags: Optional[List[GoogleCloudDatacatalogV1beta1SerializedPolicyTag]] = (
        Field(
            None,
            description='Top level policy tags associated with the taxonomy if any.',
        )
    )


class GoogleCloudDatacatalogV1beta1SystemTimestamps(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The creation time of the resource within the given system.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='The last-modified time of the resource within the given system.',
    )


class GoogleCloudDatacatalogV1beta1TableSpec(BaseModel):
    groupedEntry: Optional[str] = Field(
        None,
        description='Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.',
    )


class GoogleCloudDatacatalogV1beta1TagFieldEnumValue(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the enum value.'
    )


class Name(Enum):
    MANAGING_SYSTEM_UNSPECIFIED = 'MANAGING_SYSTEM_UNSPECIFIED'
    MANAGING_SYSTEM_DATAPLEX = 'MANAGING_SYSTEM_DATAPLEX'
    MANAGING_SYSTEM_OTHER = 'MANAGING_SYSTEM_OTHER'


class GoogleCloudDatacatalogV1beta1TaxonomyService(BaseModel):
    identity: Optional[str] = Field(None, description='P4SA Identity of the service.')
    name: Optional[Name] = Field(None, description='The Google Cloud service name.')


class GoogleCloudDatacatalogV1beta1UsageStats(BaseModel):
    totalCancellations: Optional[float] = Field(
        None,
        description='The number of times that the underlying entry was attempted to be used but was cancelled by the user.',
    )
    totalCompletions: Optional[float] = Field(
        None,
        description='The number of times that the underlying entry was successfully used.',
    )
    totalExecutionTimeForCompletionsMillis: Optional[float] = Field(
        None,
        description='Total time spent (in milliseconds) during uses the resulted in completions.',
    )
    totalFailures: Optional[float] = Field(
        None,
        description='The number of times that the underlying entry was attempted to be used but failed.',
    )


class GoogleCloudDatacatalogV1beta1ViewSpec(BaseModel):
    viewQuery: Optional[str] = Field(
        None, description='Output only. The query that defines the table view.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Taxonomies(RootModel[List[str]]):
    root: List[str]


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GetIamPolicyRequest(BaseModel):
    options: Optional[GetPolicyOptions] = Field(
        None,
        description='OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.',
    )


class GoogleCloudDatacatalogV1BigQueryConnectionSpec(BaseModel):
    cloudSql: Optional[GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec] = Field(
        None,
        description='Specification for the BigQuery connection to a Cloud SQL instance.',
    )
    connectionType: Optional[ConnectionType] = Field(
        None, description='The type of the BigQuery connection.'
    )
    hasCredential: Optional[bool] = Field(
        None,
        description='True if there are credentials attached to the BigQuery connection; false otherwise.',
    )


class GoogleCloudDatacatalogV1BigQueryTableSpec(BaseModel):
    tableSourceType: Optional[TableSourceType] = Field(
        None, description='Output only. The table source type.'
    )
    tableSpec: Optional[GoogleCloudDatacatalogV1TableSpec] = Field(
        None,
        description='Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.',
    )
    viewSpec: Optional[GoogleCloudDatacatalogV1ViewSpec] = Field(
        None,
        description='Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.',
    )


class GoogleCloudDatacatalogV1CloudBigtableInstanceSpec(BaseModel):
    cloudBigtableClusterSpecs: Optional[
        List[GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpec]
    ] = Field(None, description='The list of clusters for the Instance.')


class GoogleCloudDatacatalogV1ColumnSchema(BaseModel):
    column: Optional[str] = Field(
        None,
        description='Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.',
    )
    defaultValue: Optional[str] = Field(
        None, description='Optional. Default value for the column.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.',
    )
    gcRule: Optional[str] = Field(
        None,
        description='Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.',
    )
    highestIndexingType: Optional[HighestIndexingType] = Field(
        None, description='Optional. Most important inclusion of this column.'
    )
    lookerColumnSpec: Optional[GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec] = (
        Field(None, description='Looker specific column info of this column.')
    )
    mode: Optional[str] = Field(
        None,
        description="Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.",
    )
    ordinalPosition: Optional[int] = Field(
        None, description='Optional. Ordinal position'
    )
    subcolumns: Optional[List[GoogleCloudDatacatalogV1ColumnSchema]] = Field(
        None,
        description='Optional. Schema of sub-columns. A column can have zero or more sub-columns.',
    )
    type: Optional[str] = Field(
        None,
        description='Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.',
    )


class GoogleCloudDatacatalogV1Contacts(BaseModel):
    people: Optional[List[GoogleCloudDatacatalogV1ContactsPerson]] = Field(
        None, description='The list of contact people for the entry.'
    )


class GoogleCloudDatacatalogV1DataSource(BaseModel):
    resource: Optional[str] = Field(
        None,
        description='Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`',
    )
    service: Optional[Service] = Field(
        None, description='Service that physically stores the data.'
    )
    sourceEntry: Optional[str] = Field(
        None, description='Output only. Data Catalog entry name, if applicable.'
    )
    storageProperties: Optional[GoogleCloudDatacatalogV1StorageProperties] = Field(
        None, description='Detailed properties of the underlying storage.'
    )


class GoogleCloudDatacatalogV1DataSourceConnectionSpec(BaseModel):
    bigqueryConnectionSpec: Optional[GoogleCloudDatacatalogV1BigQueryConnectionSpec] = (
        Field(None, description='Output only. Fields specific to BigQuery connections.')
    )


class GoogleCloudDatacatalogV1GcsFileSpec(BaseModel):
    filePath: Optional[str] = Field(
        None,
        description='Required. Full file path. Example: `gs://bucket_name/a/b.txt`.',
    )
    gcsTimestamps: Optional[GoogleCloudDatacatalogV1SystemTimestamps] = Field(
        None,
        description='Output only. Creation, modification, and expiration timestamps of a Cloud Storage file.',
    )
    sizeBytes: Optional[str] = Field(
        None, description='Output only. File size in bytes.'
    )


class GoogleCloudDatacatalogV1GcsFilesetSpec(BaseModel):
    filePatterns: Optional[List[str]] = Field(
        None,
        description='Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`',
    )
    sampleGcsFileSpecs: Optional[List[GoogleCloudDatacatalogV1GcsFileSpec]] = Field(
        None,
        description='Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.',
    )


class GoogleCloudDatacatalogV1ImportEntriesMetadata(BaseModel):
    errors: Optional[List[Status]] = Field(
        None,
        description='Partial errors that are encountered during the ImportEntries operation. There is no guarantee that all the encountered errors are reported. However, if no errors are reported, it means that no errors were encountered.',
    )
    state: Optional[State] = Field(None, description='State of the import operation.')


class GoogleCloudDatacatalogV1PhysicalSchema(BaseModel):
    avro: Optional[GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema] = Field(
        None, description='Schema in Avro JSON format.'
    )
    csv: Optional[GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema] = Field(
        None, description='Marks a CSV-encoded data source.'
    )
    orc: Optional[GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema] = Field(
        None, description='Marks an ORC-encoded data source.'
    )
    parquet: Optional[GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema] = Field(
        None, description='Marks a Parquet-encoded data source.'
    )
    protobuf: Optional[GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema] = Field(
        None, description='Schema in protocol buffer format.'
    )
    thrift: Optional[GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema] = Field(
        None, description='Schema in Thrift format.'
    )


class GoogleCloudDatacatalogV1ReconcileTagsMetadata(BaseModel):
    errors: Optional[Dict[str, Status]] = Field(
        None,
        description='Maps the name of each tagged column (or empty string for a sole entry) to tagging operation status.',
    )
    state: Optional[State1] = Field(
        None, description='State of the reconciliation operation.'
    )


class GoogleCloudDatacatalogV1RoutineSpec(BaseModel):
    bigqueryRoutineSpec: Optional[GoogleCloudDatacatalogV1BigQueryRoutineSpec] = Field(
        None, description='Fields specific for BigQuery routines.'
    )
    definitionBody: Optional[str] = Field(None, description='The body of the routine.')
    language: Optional[str] = Field(
        None,
        description='The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`',
    )
    returnType: Optional[str] = Field(
        None,
        description='Return type of the argument. The exact value depends on the source system and the language.',
    )
    routineArguments: Optional[List[GoogleCloudDatacatalogV1RoutineSpecArgument]] = (
        Field(None, description='Arguments of the routine.')
    )
    routineType: Optional[RoutineType] = Field(
        None, description='The type of the routine.'
    )


class GoogleCloudDatacatalogV1Schema(BaseModel):
    columns: Optional[List[GoogleCloudDatacatalogV1ColumnSchema]] = Field(
        None,
        description='The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.',
    )


class GoogleCloudDatacatalogV1ServiceSpec(BaseModel):
    cloudBigtableInstanceSpec: Optional[
        GoogleCloudDatacatalogV1CloudBigtableInstanceSpec
    ] = Field(
        None,
        description='Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.',
    )


class GoogleCloudDatacatalogV1TagField(BaseModel):
    boolValue: Optional[bool] = Field(
        None, description='The value of a tag field with a boolean type.'
    )
    displayName: Optional[str] = Field(
        None, description='Output only. The display name of this field.'
    )
    doubleValue: Optional[float] = Field(
        None, description='The value of a tag field with a double type.'
    )
    enumValue: Optional[GoogleCloudDatacatalogV1TagFieldEnumValue] = Field(
        None,
        description='The value of a tag field with an enum type. This value must be one of the allowed values listed in this enum.',
    )
    order: Optional[int] = Field(
        None,
        description="Output only. The order of this field with respect to other fields in this tag. Can be set by Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag don't have to be sequential.",
    )
    richtextValue: Optional[str] = Field(
        None,
        description='The value of a tag field with a rich text type. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.',
    )
    stringValue: Optional[str] = Field(
        None,
        description='The value of a tag field with a string type. The maximum length is 2000 UTF-8 characters.',
    )
    timestampValue: Optional[str] = Field(
        None, description='The value of a tag field with a timestamp type.'
    )


class GoogleCloudDatacatalogV1UsageSignal(BaseModel):
    commonUsageWithinTimeRange: Optional[
        Dict[str, GoogleCloudDatacatalogV1CommonUsageStats]
    ] = Field(
        None,
        description='Common usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.',
    )
    favoriteCount: Optional[str] = Field(
        None, description='Favorite count in the source system.'
    )
    updateTime: Optional[str] = Field(
        None, description='The end timestamp of the duration of usage statistics.'
    )
    usageWithinTimeRange: Optional[Dict[str, GoogleCloudDatacatalogV1UsageStats]] = (
        Field(
            None,
            description='Output only. BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.',
        )
    )


class GoogleCloudDatacatalogV1beta1BigQueryTableSpec(BaseModel):
    tableSourceType: Optional[TableSourceType] = Field(
        None, description='Output only. The table source type.'
    )
    tableSpec: Optional[GoogleCloudDatacatalogV1beta1TableSpec] = Field(
        None,
        description='Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.',
    )
    viewSpec: Optional[GoogleCloudDatacatalogV1beta1ViewSpec] = Field(
        None,
        description='Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.',
    )


class GoogleCloudDatacatalogV1beta1EntryGroup(BaseModel):
    dataCatalogTimestamps: Optional[GoogleCloudDatacatalogV1beta1SystemTimestamps] = (
        Field(
            None,
            description='Output only. Timestamps about this EntryGroup. Default value is empty timestamps.',
        )
    )
    description: Optional[str] = Field(
        None,
        description='Entry group description, which can consist of several sentences or paragraphs that describe entry group contents. Default value is an empty string.',
    )
    displayName: Optional[str] = Field(
        None,
        description='A short name to identify the entry group, for example, "analytics data - jan 2011". Default value is an empty string.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the entry group in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id} Note that this EntryGroup and its child resources may not actually be stored in the location in this name.',
    )


class GoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse(BaseModel):
    taxonomies: Optional[List[GoogleCloudDatacatalogV1beta1SerializedTaxonomy]] = Field(
        None, description='List of taxonomies and policy tags in a tree structure.'
    )


class GoogleCloudDatacatalogV1beta1FieldTypeEnumType(BaseModel):
    allowedValues: Optional[
        List[GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue]
    ] = None


class GoogleCloudDatacatalogV1beta1GcsFileSpec(BaseModel):
    filePath: Optional[str] = Field(
        None,
        description='Required. The full file path. Example: `gs://bucket_name/a/b.txt`.',
    )
    gcsTimestamps: Optional[GoogleCloudDatacatalogV1beta1SystemTimestamps] = Field(
        None, description='Output only. Timestamps about the Cloud Storage file.'
    )
    sizeBytes: Optional[str] = Field(
        None, description='Output only. The size of the file, in bytes.'
    )


class GoogleCloudDatacatalogV1beta1GcsFilesetSpec(BaseModel):
    filePatterns: Optional[List[str]] = Field(
        None,
        description='Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`',
    )
    sampleGcsFileSpecs: Optional[List[GoogleCloudDatacatalogV1beta1GcsFileSpec]] = (
        Field(
            None,
            description='Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.',
        )
    )


class GoogleCloudDatacatalogV1beta1InlineSource(BaseModel):
    taxonomies: Optional[List[GoogleCloudDatacatalogV1beta1SerializedTaxonomy]] = Field(
        None, description='Required. Taxonomies to be imported.'
    )


class GoogleCloudDatacatalogV1beta1ListEntryGroupsResponse(BaseModel):
    entryGroups: Optional[List[GoogleCloudDatacatalogV1beta1EntryGroup]] = Field(
        None, description='EntryGroup details.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. It is set to empty if no items remain in results.',
    )


class GoogleCloudDatacatalogV1beta1ListPolicyTagsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token used to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    policyTags: Optional[List[GoogleCloudDatacatalogV1beta1PolicyTag]] = Field(
        None, description='The policy tags that are in the requested taxonomy.'
    )


class GoogleCloudDatacatalogV1beta1SearchCatalogRequest(BaseModel):
    orderBy: Optional[str] = Field(
        None,
        description='Specifies the ordering of results, currently supported case-sensitive choices are: * `relevance`, only supports descending * `last_modified_timestamp [asc|desc]`, defaults to descending if not specified * `default` that can only be descending If not specified, defaults to `relevance` descending.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Number of results in the search page. If <=0 then defaults to 10. Max limit for page_size is 1000. Throws an invalid argument for page_size > 1000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='Optional. Pagination token returned in an earlier SearchCatalogResponse.next_page_token, which indicates that this is a continuation of a prior SearchCatalogRequest call, and that the system should return the next page of data. If empty, the first page is returned.',
    )
    query: Optional[str] = Field(
        None,
        description='Optional. The query string in search query syntax. An empty query string will result in all data assets (in the specified scope) that the user has access to. Query strings can be simple as "x" or more qualified as: * name:x * column:x * description:y Note: Query tokens need to have a minimum of 3 characters for substring matching to work correctly. See [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.',
    )
    scope: Optional[GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope] = Field(
        None,
        description='Required. The scope of this search request. A `scope` that has empty `include_org_ids`, `include_project_ids` AND false `include_gcp_public_datasets` is considered invalid. Data Catalog will return an error in such a case.',
    )


class GoogleCloudDatacatalogV1beta1SearchCatalogResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token that can be used to retrieve the next page of results.',
    )
    results: Optional[List[GoogleCloudDatacatalogV1beta1SearchCatalogResult]] = Field(
        None, description='Search results.'
    )
    totalSize: Optional[int] = Field(
        None,
        description='The approximate total number of entries matched by the query.',
    )
    unreachable: Optional[List[str]] = Field(
        None,
        description='Unreachable locations. Search result does not include data from those locations. Users can get additional information on the error by repeating the search request with a more restrictive parameter -- setting the value for `SearchDataCatalogRequest.scope.restricted_locations`.',
    )


class GoogleCloudDatacatalogV1beta1TagField(BaseModel):
    boolValue: Optional[bool] = Field(
        None, description='Holds the value for a tag field with boolean type.'
    )
    displayName: Optional[str] = Field(
        None, description='Output only. The display name of this field.'
    )
    doubleValue: Optional[float] = Field(
        None, description='Holds the value for a tag field with double type.'
    )
    enumValue: Optional[GoogleCloudDatacatalogV1beta1TagFieldEnumValue] = Field(
        None,
        description='Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum.',
    )
    order: Optional[int] = Field(
        None,
        description='Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential.',
    )
    stringValue: Optional[str] = Field(
        None, description='Holds the value for a tag field with string type.'
    )
    timestampValue: Optional[str] = Field(
        None, description='Holds the value for a tag field with timestamp type.'
    )


class GoogleCloudDatacatalogV1beta1Taxonomy(BaseModel):
    activatedPolicyTypes: Optional[List[ActivatedPolicyType]] = Field(
        None,
        description='Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of this taxonomy, whose format is: "projects/{project_number}/locations/{location_id}/taxonomies/{id}".',
    )
    policyTagCount: Optional[int] = Field(
        None,
        description='Output only. Number of policy tags contained in this taxonomy.',
    )
    service: Optional[GoogleCloudDatacatalogV1beta1TaxonomyService] = Field(
        None,
        description="Output only. Identity of the service which owns the Taxonomy. This field is only populated when the taxonomy is created by a Google Cloud service. Currently only 'DATAPLEX' is supported.",
    )
    taxonomyTimestamps: Optional[GoogleCloudDatacatalogV1beta1SystemTimestamps] = Field(
        None,
        description='Output only. Timestamps about this taxonomy. Only create_time and update_time are used.',
    )


class GoogleCloudDatacatalogV1beta1UsageSignal(BaseModel):
    updateTime: Optional[str] = Field(
        None, description='The timestamp of the end of the usage statistics duration.'
    )
    usageWithinTimeRange: Optional[
        Dict[str, GoogleCloudDatacatalogV1beta1UsageStats]
    ] = Field(
        None,
        description='Usage statistics over each of the pre-defined time ranges, supported strings for time ranges are {"24H", "7D", "30D"}.',
    )


class Policy(BaseModel):
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )


class GoogleCloudDatacatalogV1BusinessContext(BaseModel):
    contacts: Optional[GoogleCloudDatacatalogV1Contacts] = Field(
        None, description='Contact people for the entry.'
    )
    entryOverview: Optional[GoogleCloudDatacatalogV1EntryOverview] = Field(
        None, description='Entry overview fields for rich text descriptions of entries.'
    )


class GoogleCloudDatacatalogV1DataplexSpec(BaseModel):
    asset: Optional[str] = Field(
        None,
        description='Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.',
    )
    compressionFormat: Optional[str] = Field(
        None, description='Compression format of the data, e.g., zip, gzip etc.'
    )
    dataFormat: Optional[GoogleCloudDatacatalogV1PhysicalSchema] = Field(
        None, description='Format of the data.'
    )
    projectId: Optional[str] = Field(
        None,
        description='Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.',
    )


class GoogleCloudDatacatalogV1DataplexTableSpec(BaseModel):
    dataplexSpec: Optional[GoogleCloudDatacatalogV1DataplexSpec] = Field(
        None, description='Common Dataplex fields.'
    )
    externalTables: Optional[List[GoogleCloudDatacatalogV1DataplexExternalTable]] = (
        Field(
            None,
            description='List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.',
        )
    )
    userManaged: Optional[bool] = Field(
        None, description='Indicates if the table schema is managed by the user or not.'
    )


class GoogleCloudDatacatalogV1Tag(BaseModel):
    column: Optional[str] = Field(
        None,
        description='Resources like entry can have schemas associated with them. This scope allows you to attach tags to an individual column based on that schema. To attach a tag to a nested column, separate column names with a dot (`.`). Example: `column.nested_column`.',
    )
    fields: Optional[Dict[str, GoogleCloudDatacatalogV1TagField]] = Field(
        None,
        description='Required. Maps the ID of a tag field to its value and additional information about that field. Tag template defines valid field IDs. A tag must have at least 1 field and at most 500 fields.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.',
    )
    template: Optional[str] = Field(
        None,
        description='Required. The resource name of the tag template this tag uses. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE_ID}` This field cannot be modified after creation.',
    )
    templateDisplayName: Optional[str] = Field(
        None, description='Output only. The display name of the tag template.'
    )


class GoogleCloudDatacatalogV1beta1Entry(BaseModel):
    bigqueryDateShardedSpec: Optional[
        GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec
    ] = Field(
        None,
        description='Specification for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.',
    )
    bigqueryTableSpec: Optional[GoogleCloudDatacatalogV1beta1BigQueryTableSpec] = Field(
        None,
        description='Specification that applies to a BigQuery table. This is only valid on entries of type `TABLE`.',
    )
    description: Optional[str] = Field(
        None,
        description='Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Display information such as title and description. A short name to identify the entry, for example, "Analytics Data - Jan 2011". Default value is an empty string.',
    )
    gcsFilesetSpec: Optional[GoogleCloudDatacatalogV1beta1GcsFilesetSpec] = Field(
        None,
        description='Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.',
    )
    integratedSystem: Optional[IntegratedSystem1] = Field(
        None,
        description="Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.",
    )
    linkedResource: Optional[str] = Field(
        None,
        description='The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name.',
    )
    schema_: Optional[GoogleCloudDatacatalogV1beta1Schema] = Field(
        None,
        alias='schema',
        description='Schema of the entry. An entry might not have any schema attached to it.',
    )
    sourceSystemTimestamps: Optional[GoogleCloudDatacatalogV1beta1SystemTimestamps] = (
        Field(
            None,
            description='Output only. Timestamps about the underlying resource, not about this Data Catalog entry. Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty timestamp.',
        )
    )
    type: Optional[Type4] = Field(
        None,
        description='The type of the entry. Only used for Entries with types in the EntryType enum.',
    )
    usageSignal: Optional[GoogleCloudDatacatalogV1beta1UsageSignal] = Field(
        None, description='Output only. Statistics on the usage level of the resource.'
    )
    userSpecifiedSystem: Optional[str] = Field(
        None,
        description="This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.",
    )
    userSpecifiedType: Optional[str] = Field(
        None,
        description='Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example "my_special_type". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`.',
    )


class GoogleCloudDatacatalogV1beta1FieldType(BaseModel):
    enumType: Optional[GoogleCloudDatacatalogV1beta1FieldTypeEnumType] = Field(
        None, description='Represents an enum type.'
    )
    primitiveType: Optional[PrimitiveType] = Field(
        None, description='Represents primitive types - string, bool etc.'
    )


class GoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest(BaseModel):
    inlineSource: Optional[GoogleCloudDatacatalogV1beta1InlineSource] = Field(
        None, description='Inline source used for taxonomies to be imported.'
    )


class GoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse(BaseModel):
    taxonomies: Optional[List[GoogleCloudDatacatalogV1beta1Taxonomy]] = Field(
        None, description='Taxonomies that were imported.'
    )


class GoogleCloudDatacatalogV1beta1ListEntriesResponse(BaseModel):
    entries: Optional[List[GoogleCloudDatacatalogV1beta1Entry]] = Field(
        None, description='Entry details.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. It is set to empty if no items remain in results.',
    )


class GoogleCloudDatacatalogV1beta1ListTaxonomiesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token used to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    taxonomies: Optional[List[GoogleCloudDatacatalogV1beta1Taxonomy]] = Field(
        None, description='Taxonomies that the project contains.'
    )


class GoogleCloudDatacatalogV1beta1Tag(BaseModel):
    column: Optional[str] = Field(
        None,
        description='Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`',
    )
    fields: Optional[Dict[str, GoogleCloudDatacatalogV1beta1TagField]] = Field(
        None,
        description="Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name.',
    )
    template: Optional[str] = Field(
        None,
        description='Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation.',
    )
    templateDisplayName: Optional[str] = Field(
        None, description='Output only. The display name of the tag template.'
    )


class GoogleCloudDatacatalogV1beta1TagTemplateField(BaseModel):
    description: Optional[str] = Field(
        None, description='The description for this field. Defaults to an empty string.'
    )
    displayName: Optional[str] = Field(
        None,
        description='The display name for this field. Defaults to an empty string.',
    )
    isRequired: Optional[bool] = Field(
        None, description='Whether this is a required field. Defaults to false.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name.',
    )
    order: Optional[int] = Field(
        None,
        description='The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential.',
    )
    type: Optional[GoogleCloudDatacatalogV1beta1FieldType] = Field(
        None, description='Required. The type of value this tag field can contain.'
    )


class GoogleCloudDatacatalogV1DatabaseTableSpec(BaseModel):
    databaseViewSpec: Optional[
        GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
    ] = Field(
        None,
        description='Spec what aplies to tables that are actually views. Not set for "real" tables.',
    )
    dataplexTable: Optional[GoogleCloudDatacatalogV1DataplexTableSpec] = Field(
        None,
        description='Output only. Fields specific to a Dataplex table and present only in the Dataplex table entries.',
    )
    type: Optional[Type2] = Field(None, description='Type of this table.')


class GoogleCloudDatacatalogV1DataplexFilesetSpec(BaseModel):
    dataplexSpec: Optional[GoogleCloudDatacatalogV1DataplexSpec] = Field(
        None, description='Common Dataplex fields.'
    )


class GoogleCloudDatacatalogV1FilesetSpec(BaseModel):
    dataplexFileset: Optional[GoogleCloudDatacatalogV1DataplexFilesetSpec] = Field(
        None,
        description='Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.',
    )


class GoogleCloudDatacatalogV1beta1ListTagsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. It is set to empty if no items remain in results.',
    )
    tags: Optional[List[GoogleCloudDatacatalogV1beta1Tag]] = Field(
        None, description='Tag details.'
    )


class GoogleCloudDatacatalogV1beta1TagTemplate(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The display name for this template. Defaults to an empty string.',
    )
    fields: Optional[Dict[str, GoogleCloudDatacatalogV1beta1TagTemplateField]] = Field(
        None,
        description='Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. This map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9) and underscores (_). Field IDs must be at least 1 character long and at most 64 characters long. Field IDs must start with a letter or underscore.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the tag template in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} Note that this TagTemplate and its child resources may not actually be stored in the location in this name.',
    )


class GoogleCloudDatacatalogV1Entry(BaseModel):
    bigqueryDateShardedSpec: Optional[
        GoogleCloudDatacatalogV1BigQueryDateShardedSpec
    ] = Field(
        None,
        description='Output only. Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).',
    )
    bigqueryTableSpec: Optional[GoogleCloudDatacatalogV1BigQueryTableSpec] = Field(
        None,
        description='Output only. Specification that applies to a BigQuery table. Valid only for entries with the `TABLE` type.',
    )
    businessContext: Optional[GoogleCloudDatacatalogV1BusinessContext] = Field(
        None,
        description='Business Context of the entry. Not supported for BigQuery datasets',
    )
    cloudBigtableSystemSpec: Optional[
        GoogleCloudDatacatalogV1CloudBigtableSystemSpec
    ] = Field(
        None,
        description='Specification that applies to Cloud Bigtable system. Only settable when `integrated_system` is equal to `CLOUD_BIGTABLE`',
    )
    dataSource: Optional[GoogleCloudDatacatalogV1DataSource] = Field(
        None, description='Output only. Physical location of the entry.'
    )
    dataSourceConnectionSpec: Optional[
        GoogleCloudDatacatalogV1DataSourceConnectionSpec
    ] = Field(
        None,
        description='Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.',
    )
    databaseTableSpec: Optional[GoogleCloudDatacatalogV1DatabaseTableSpec] = Field(
        None,
        description='Specification that applies to a table resource. Valid only for entries with the `TABLE` or `EXPLORE` type.',
    )
    description: Optional[str] = Field(
        None,
        description='Entry description that can consist of several sentences or paragraphs that describe entry contents. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). The maximum size is 2000 bytes when encoded in UTF-8. Default value is an empty string.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Display name of an entry. The maximum size is 500 bytes when encoded in UTF-8. Default value is an empty string.',
    )
    filesetSpec: Optional[GoogleCloudDatacatalogV1FilesetSpec] = Field(
        None,
        description='Specification that applies to a fileset resource. Valid only for entries with the `FILESET` type.',
    )
    fullyQualifiedName: Optional[str] = Field(
        None,
        description='[Fully Qualified Name (FQN)](https://cloud.google.com//data-catalog/docs/fully-qualified-names) of the resource. Set automatically for entries representing resources from synced systems. Settable only during creation, and read-only later. Can be used for search and lookup of the entries. ',
    )
    gcsFilesetSpec: Optional[GoogleCloudDatacatalogV1GcsFilesetSpec] = Field(
        None,
        description='Specification that applies to a Cloud Storage fileset. Valid only for entries with the `FILESET` type.',
    )
    integratedSystem: Optional[IntegratedSystem] = Field(
        None,
        description="Output only. Indicates the entry's source system that Data Catalog integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.",
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cloud labels attached to the entry. In Data Catalog, you can create and modify labels attached only to custom entries. Synced entries have unmodifiable labels that come from the source system.',
    )
    linkedResource: Optional[str] = Field(
        None,
        description='The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` Output only when the entry is one of the types in the `EntryType` enum. For entries with a `user_specified_type`, this field is optional and defaults to an empty string. The resource string must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), periods (.), colons (:), slashes (/), dashes (-), and hashes (#). The maximum size is 200 bytes when encoded in UTF-8.',
    )
    lookerSystemSpec: Optional[GoogleCloudDatacatalogV1LookerSystemSpec] = Field(
        None,
        description='Specification that applies to Looker sysstem. Only settable when `user_specified_system` is equal to `LOOKER`',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of an entry in URL format. Note: The entry itself and its child resources might not be stored in the location specified in its name.',
    )
    personalDetails: Optional[GoogleCloudDatacatalogV1PersonalDetails] = Field(
        None,
        description='Output only. Additional information related to the entry. Private to the current user.',
    )
    routineSpec: Optional[GoogleCloudDatacatalogV1RoutineSpec] = Field(
        None,
        description='Specification that applies to a user-defined function or procedure. Valid only for entries with the `ROUTINE` type.',
    )
    schema_: Optional[GoogleCloudDatacatalogV1Schema] = Field(
        None,
        alias='schema',
        description='Schema of the entry. An entry might not have any schema attached to it.',
    )
    serviceSpec: Optional[GoogleCloudDatacatalogV1ServiceSpec] = Field(
        None, description='Specification that applies to a Service resource.'
    )
    sourceSystemTimestamps: Optional[GoogleCloudDatacatalogV1SystemTimestamps] = Field(
        None,
        description='Timestamps from the underlying resource, not from the Data Catalog entry. Output only when the entry has a system listed in the `IntegratedSystem` enum. For entries with `user_specified_system`, this field is optional and defaults to an empty timestamp.',
    )
    sqlDatabaseSystemSpec: Optional[GoogleCloudDatacatalogV1SqlDatabaseSystemSpec] = (
        Field(
            None,
            description='Specification that applies to a relational database system. Only settable when `user_specified_system` is equal to `SQL_DATABASE`',
        )
    )
    type: Optional[Type3] = Field(
        None,
        description='The type of the entry. Only used for entries with types listed in the `EntryType` enum. Currently, only `FILESET` enum value is allowed. All other entries created in Data Catalog must use the `user_specified_type`.',
    )
    usageSignal: Optional[GoogleCloudDatacatalogV1UsageSignal] = Field(
        None, description='Resource usage statistics.'
    )
    userSpecifiedSystem: Optional[str] = Field(
        None,
        description="Indicates the entry's source system that Data Catalog doesn't automatically integrate with. The `user_specified_system` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.",
    )
    userSpecifiedType: Optional[str] = Field(
        None,
        description="Custom entry type that doesn't match any of the values allowed for input and listed in the `EntryType` enum. When creating an entry, first check the type values in the enum. If there are no appropriate types for the new entry, provide a custom value, for example, `my_special_type`. The `user_specified_type` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.",
    )


class GoogleCloudDatacatalogV1TaggedEntry(BaseModel):
    absentTags: Optional[List[GoogleCloudDatacatalogV1Tag]] = Field(
        None,
        description='Optional. Tags that should be deleted from the Data Catalog. Caller should populate template name and column only.',
    )
    presentTags: Optional[List[GoogleCloudDatacatalogV1Tag]] = Field(
        None,
        description='Optional. Tags that should be ingested into the Data Catalog. Caller should populate template name, column and fields.',
    )
    v1Entry: Optional[GoogleCloudDatacatalogV1Entry] = Field(
        None, description='Non-encrypted Data Catalog v1 Entry.'
    )


class GoogleCloudDatacatalogV1DumpItem(BaseModel):
    taggedEntry: Optional[GoogleCloudDatacatalogV1TaggedEntry] = Field(
        None, description='Entry and its tags.'
    )


GoogleCloudDatacatalogV1beta1ColumnSchema.model_rebuild()
GoogleCloudDatacatalogV1beta1SerializedPolicyTag.model_rebuild()
GoogleCloudDatacatalogV1ColumnSchema.model_rebuild()
